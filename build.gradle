buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://oss.jfrog.org/artifactory/libs-release'
        }
    }
    dependencies {
        classpath group: 'de.dfki.mary', name: 'marytts-lang-en', version: '5.1.1'
    }
}

apply plugin: 'groovy'

repositories {
    maven {
        url 'https://oss.jfrog.org/artifactory/repo'
    }
    ivy {
        url 'http://diax.coli.uni-saarland.de/mary/'
        layout 'pattern', {
            artifact '[module]-[revision]-[classifier].[ext]'
        }
    }
}

configurations {
    raw
    ehmm
}

sourceSets.create 'raw'

dependencies {
    raw name: 'cmu_us_slt_arctic', version: '0.95', classifier: 'release', ext: 'tar.bz2'
    ehmm(group: 'de.dfki.mary', name: 'marytts-lang-en', version: '5.2-20150512.183956-5') {
        exclude module: 'freetts'
        exclude module: 'freetts-de'
        exclude module: 'freetts-en_us'
        exclude module: 'mwdumper'
        exclude module: 'sgt'
    }
    ehmm(group: 'de.dfki.mary', name: 'marytts-builder', version: '5.2-20150512.184218-5') {
        exclude module: 'freetts'
        exclude module: 'freetts-de'
        exclude module: 'freetts-en_us'
        exclude module: 'mwdumper'
        exclude module: 'sgt'
    }
}

processRawResources {
    from configurations.raw
    def packs = []
    filesMatching '*.tar.*', {
        packs << tarTree("$destinationDir/$it.name")
    }
    filesMatching '*.zip', {
        packs << zipTree(it.path)
    }
    doLast {
        packs.each { pack ->
            copy {
                from pack
                into destinationDir
                include(['lab', 'pm', 'mcep', 'utt', 'wav'].collect { "**/*.$it" })
                includeEmptyDirs = false
            }
        }
    }
}

task extractText {
    dependsOn processRawResources
    inputs.files fileTree(sourceSets.raw.output.resourcesDir).include('cmu_us_slt_arctic/festival/utts/*.utt')
    outputs.files inputs.files.collect {
        "${sourceSets.raw.output.resourcesDir}/cmu_us_slt_arctic/text/${it.name.replace('.utt', '.txt')}"
    }
    doLast {
        [inputs.files as List, outputs.files as List].transpose().each { inFile, outFile ->
            inFile.eachLine {
                if (it.startsWith('Features')) {
                    outFile.text = it.split(/("\\"|\\"")/)[1]
                }
            }
        }
    }
}

task generateAllophones {
    inputs.files extractText
    def destDir = "${sourceSets.raw.output.resourcesDir}/cmu_us_slt_arctic/prompt_allophones"
    outputs.files inputs.files.collect {
        new File(destDir, it.name.replace('.txt', '.xml'))
    }
    doLast {
        def parser = new XmlSlurper(false, false)
        def mary = new marytts.LocalMaryInterface()
        mary.outputType = 'ALLOPHONES'
        [inputs.files as List, outputs.files as List].transpose().each { inFile, outFile ->
            def doc = mary.generateXML(inFile.text)
            def xmlStr = groovy.xml.XmlUtil.serialize(doc.documentElement)
            def xml = parser.parseText(xmlStr)
            outFile.text = groovy.xml.XmlUtil.serialize(xml)
        }
    }
}
task processEHMMSources(type: Copy) {
    from 'src/ehmm'
    into "$buildDir/ehmm"
}

task compileEHMM(type: Exec) {
    dependsOn processEHMMSources
    commandLine 'make'
    workingDir "$buildDir/ehmm"
}

task runEHMMLabeler(type: JavaExec) {
    dependsOn processRawResources, generateAllophones, compileEHMM
    classpath configurations.ehmm
    main 'marytts.tools.voiceimport.EHMMLabeler'
    workingDir "${sourceSets.raw.output.resourcesDir}/cmu_us_slt_arctic"
    systemProperties['EHMMDIR'] = "$buildDir/ehmm"
}
